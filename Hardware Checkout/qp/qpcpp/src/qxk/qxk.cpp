//$file${src::qxk::qxk.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: qpcpp.qm
// File:  ${src::qxk::qxk.cpp}
//
// This code has been generated by QM 5.2.4 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This code is covered by the following QP license:
// License #    : LicenseRef-QL-dual
// Issued to    : Any user of the QP/C++ real-time embedded framework
// Framework(s) : qpcpp
// Support ends : 2023-12-31
// License scope:
//
// Copyright (C) 2005 Quantum Leaps, LLC <state-machine.com>.
//
// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
//
// This software is dual-licensed under the terms of the open source GNU
// General Public License version 3 (or any later version), or alternatively,
// under the terms of one of the closed source Quantum Leaps commercial
// licenses.
//
// The terms of the open source GNU General Public License version 3
// can be found at: <www.gnu.org/licenses/gpl-3.0>
//
// The terms of the closed source Quantum Leaps commercial licenses
// can be found at: <www.state-machine.com/licensing>
//
// Redistributions in source code must retain this top-level comment block.
// Plagiarizing this software to sidestep the license obligations is illegal.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${src::qxk::qxk.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//! @file
//! @brief QXK/C++ preemptive kernel core functions
//! public interface.

#define QP_IMPL             // this is QP implementation
#include "qf_port.hpp"      // QF port
#include "qf_pkg.hpp"       // QF package-scope internal interface
#include "qassert.h"        // QP embedded systems-friendly assertions
#ifdef Q_SPY                // QS software tracing enabled?
    #include "qs_port.hpp"  // QS port
    #include "qs_pkg.hpp"   // QS facilities for pre-defined trace records
#else
    #include "qs_dummy.hpp" // disable the QS software tracing
#endif // Q_SPY

// protection against including this source file in a wrong project
#ifndef QP_INC_QXK_HPP_
    #error "Source file included in a project NOT based on the QXK kernel"
#endif // QP_INC_QXK_HPP_

//============================================================================
namespace { // unnamed local namespace
Q_DEFINE_THIS_MODULE("qxk")
} // unnamed namespace

//============================================================================
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 700U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 7.0.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${QXK::QXK-base} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace QP {
namespace QXK {

//${QXK::QXK-base::schedLock} ................................................
QSchedStatus schedLock(std::uint_fast8_t const ceiling) noexcept {
    QF_CRIT_STAT_
    QF_CRIT_E_();

    //! @pre The QXK scheduler lock cannot be called from an ISR;
    Q_REQUIRE_ID(400, !QXK_ISR_CONTEXT_());

    QSchedStatus stat; // saved lock status to be returned

    // is the lock ceiling being raised?
    if (ceiling > static_cast<std::uint_fast8_t>(QXK_attr_.lockCeil)) {
        QS_BEGIN_NOCRIT_PRE_(QS_SCHED_LOCK, 0U)
            QS_TIME_PRE_(); // timestamp
            // the previous lock prio & new lock prio
            QS_2U8_PRE_(QXK_attr_.lockCeil,
                        static_cast<std::uint8_t>(ceiling));
        QS_END_NOCRIT_PRE_()

        // previous status of the lock
        stat  = static_cast<QSchedStatus>(QXK_attr_.lockHolder);
        stat |= static_cast<QSchedStatus>(QXK_attr_.lockCeil) << 8U;

        // new status of the lock
        QXK_attr_.lockHolder = (QXK_attr_.curr != nullptr)
                               ? QXK_attr_.curr->m_prio
                               : 0U;
        QXK_attr_.lockCeil   = static_cast<std::uint8_t>(ceiling);
    }
    else {
       stat = 0xFFU; // scheduler not locked
    }
    QF_CRIT_X_();

    return stat; // return the status to be saved in a stack variable
}

//${QXK::QXK-base::schedUnlock} ..............................................
void schedUnlock(QSchedStatus const stat) noexcept {
    // has the scheduler been actually locked by the last QXK::schedLock()?
    if (stat != 0xFFU) {
        std::uint8_t const lockCeil = QXK_attr_.lockCeil;
        std::uint8_t const prevCeil = static_cast<std::uint8_t>(stat >> 8U);
        QF_CRIT_STAT_
        QF_CRIT_E_();

        //! @pre The scheduler cannot be unlocked:
        //! - from the ISR context; and
        //! - the current lock priority must be greater than the previous
        Q_REQUIRE_ID(500, (!QXK_ISR_CONTEXT_())
                          && (lockCeil > prevCeil));

        QS_BEGIN_NOCRIT_PRE_(QS_SCHED_UNLOCK, 0U)
            QS_TIME_PRE_(); // timestamp
            // ceiling before unlocking & prio after unlocking
            QS_2U8_PRE_(lockCeil, prevCeil);
        QS_END_NOCRIT_PRE_()

        // restore the previous lock priority and lock holder
        QXK_attr_.lockCeil   = prevCeil;
        QXK_attr_.lockHolder = static_cast<std::uint8_t>(stat & 0xFFU);

        // find the highest-prio thread ready to run
        if (QXK_sched_() != 0U) { // synchronous preemption needed?
            QXK_activate_(); // synchronously activate unlocked AOs
        }

        QF_CRIT_X_();
    }
}

} // namespace QXK
} // namespace QP
//$enddef${QXK::QXK-base} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${QXK::QF-cust} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace QP {
namespace QF {

//${QXK::QF-cust::init} ......................................................
void init() {
    #if (QF_MAX_EPOOL > 0U)
    QF::maxPool_ = 0U;
    #endif

    bzero(&QTimeEvt::timeEvtHead_[0], sizeof(QTimeEvt::timeEvtHead_));
    bzero(&QActive::registry_[0],     sizeof(QActive::registry_));
    bzero(&QF::readySet_,             sizeof(QF::readySet_));
    bzero(&QXK_attr_,                 sizeof(QXK_attr_));

    // setup the QXK scheduler as initially locked and not running
    QXK_attr_.lockCeil = (QF_MAX_ACTIVE + 1U); // scheduler locked

    // storage capable for holding a blank QActive object (const in ROM)
    static void* const
        idle_ao[((sizeof(QActive) + sizeof(void*)) - 1U) / sizeof(void*)]
            = { nullptr };
    // register the blank QActive object as the idle-AO (cast 'const' away)
    QActive::registry_[0] = QF_CONST_CAST_(QActive*,
        reinterpret_cast<QActive const*>(idle_ao));

    #ifdef QXK_INIT
    QXK_INIT(); // port-specific initialization of the QXK kernel
    #endif
}

//${QXK::QF-cust::stop} ......................................................
void stop() {
    onCleanup();  // cleanup callback
    // nothing else to do for the QXK preemptive kernel
}

//${QXK::QF-cust::run} .......................................................
int_t run() {
    #ifdef Q_SPY
    QS_SIG_DICTIONARY(QP::QXK::DELAY_SIG,   nullptr);
    QS_SIG_DICTIONARY(QP::QXK::TIMEOUT_SIG, nullptr);

    // produce the QS_QF_RUN trace record
    QF_INT_DISABLE();
    QS::beginRec_(QS_REC_NUM_(QS_QF_RUN));
    QS::endRec_();
    QF_INT_ENABLE();
    #endif

    onStartup(); // startup callback

    QF_INT_DISABLE();

    QXK_attr_.lockCeil = 0U; //  unlock the QXK scheduler

    // activate AOs to process events posted so far
    if (QXK_sched_() != 0U) {
        QXK_activate_();
    }

    #ifdef QXK_START
    QXK_START(); /* port-specific startup of the QXK kernel */
    #endif

    QF_INT_ENABLE();
    for (;;) { // QXK idle loop...
        QXK::onIdle(); // application-specific QXK idle callback
    }

    #ifdef __GNUC__  // GNU compiler?
    return 0;
    #endif
}

} // namespace QF
} // namespace QP
//$enddef${QXK::QF-cust} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${QXK::QActive} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace QP {

//${QXK::QActive} ............................................................

//${QXK::QActive::start} .....................................................
void QActive::start(
    QPrioSpec const prioSpec,
    QEvt const * * const qSto,
    std::uint_fast16_t const qLen,
    void * const stkSto,
    std::uint_fast16_t const stkSize,
    void const * const par)
{
    Q_UNUSED_PAR(stkSto);  // not needed in QXK
    Q_UNUSED_PAR(stkSize); // not needed in QXK

    //! @pre AO cannot be started:
    //! - from an ISR;
    //! - the stack storage must NOT be provided
    //! - preemption-threshold is NOT provided (because QXK kernel
    //!   does not support preemption-threshold scheduling)
    Q_REQUIRE_ID(200, (!QXK_ISR_CONTEXT_())
                       && (stkSto == nullptr)
                       && ((prioSpec & 0xFF00U) == 0U));

    m_prio  = static_cast<std::uint8_t>(prioSpec & 0xFFU); //  QF-prio.
    m_pthre = 0U; // preemption-threshold NOT used
    register_(); // make QF aware of this AO

    m_eQueue.init(qSto, qLen); // initialize QEQueue of this AO
    m_osObject  = nullptr; // no private stack for AO

    this->init(par, m_prio); // take the top-most initial tran. (virtual)
    QS_FLUSH(); // flush the trace buffer to the host

    // see if this AO needs to be scheduled in case QXK is running
    QF_CRIT_STAT_
    QF_CRIT_E_();
    if (QXK_attr_.lockCeil <= QF_MAX_ACTIVE) { // scheduler running?
        if (QXK_sched_() != 0U) { // synchronous preemption needed?
            QXK_activate_(); // synchronously activate basic threads
        }
    }
    QF_CRIT_X_();
}

} // namespace QP
//$enddef${QXK::QActive} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//============================================================================
extern "C" {
//$define${QXK-extern-C} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${QXK-extern-C::QXK_attr_} .................................................
QXK_Attr QXK_attr_;

//${QXK-extern-C::QXK_sched_} ................................................
std::uint_fast8_t QXK_sched_() noexcept {
    std::uint_fast8_t p;

    if (QP::QF::readySet_.isEmpty()) {
        p = 0U; // no activation needed
    }
    else {
        // find the highest-prio thread ready to run
        p = QP::QF::readySet_.findMax();
        if (p <= QXK_attr_.lockCeil) {
            // priority of the thread holding the lock
            p = static_cast<std::uint_fast8_t>(
                 QP::QActive::registry_[QXK_attr_.lockHolder]->m_prio);
            if (p != 0U) {
                Q_ASSERT_ID(610, QP::QF::readySet_.hasElement(p));
            }
        }
    }
    QP::QActive const * const curr = QXK_attr_.curr;
    QP::QActive * const next = QP::QActive::registry_[p];

    // the thread found must be registered in QF
    Q_ASSERT_ID(620, next != nullptr);

    // is the current thread a basic-thread?
    if (curr == nullptr) {

        // is the new priority above the active priority?
        if (p > QXK_attr_.actPrio) {
            QXK_attr_.next = next; // set the next AO to activate

            if (next->m_osObject != nullptr) { // is next extended?
                QXK_CONTEXT_SWITCH_();
                p = 0U; // no activation needed
            }
        }
        else { // below the pre-thre
            QXK_attr_.next = nullptr;
            p = 0U; // no activation needed
        }
    }
    else { // currently executing an extended-thread
        // is the current thread different from the next?
        if (curr != next) {
            QXK_attr_.next = next;
            QXK_CONTEXT_SWITCH_();
        }
        else { // next is the same as current
            QXK_attr_.next = nullptr; // no need to context-switch
        }
        p = 0U; // no activation needed
    }
    return p;
}

//${QXK-extern-C::QXK_activate_} .............................................
void QXK_activate_() noexcept {
    std::uint8_t const prio_in = QXK_attr_.actPrio;
    QP::QActive *next = QXK_attr_.next; // the next AO (basic-thread) to run

    //! @pre QXK_attr_.next must be valid and the prio must be in range
    Q_REQUIRE_ID(700, (next != nullptr) && (prio_in <= QF_MAX_ACTIVE));

    // QXK Context switch callback defined or QS tracing enabled?
    #if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
    QXK_contextSw(next);
    #endif // QF_ON_CONTEXT_SW || Q_SPY

    QXK_attr_.next = nullptr; // clear the next AO
    QXK_attr_.curr = nullptr; // current is basic-thread

    // priority of the next thread
    std::uint8_t p = next->m_prio;

    // loop until no more ready-to-run AOs of higher prio than the initial
    do  {
        QXK_attr_.actPrio = p; // next active prio

        QF_INT_ENABLE(); // unconditionally enable interrupts

        // perform the run-to-completion (RTC) step...
        // 1. retrieve the event from the AO's event queue, which by this
        //    time must be non-empty and QActive_get_() asserts it.
        // 2. dispatch the event to the AO's state machine.
        // 3. determine if event is garbage and collect it if so
        //
        QP::QEvt const * const e = next->get_();
        next->dispatch(e, next->m_prio);
    #if (QF_MAX_EPOOL > 0U)
        QP::QF::gc(e);
    #endif

        QF_INT_DISABLE(); // unconditionally disable interrupts

        if (next->m_eQueue.isEmpty()) { // empty queue?
            QP::QF::readySet_.remove(p);
        }

        if (QP::QF::readySet_.isEmpty()) {
            QXK_attr_.next = nullptr;
            next = QP::QActive::registry_[0];
            p = 0U; // no activation needed
        }
        else {
            // find next highest-prio below the lock ceiling
            p = static_cast<std::uint8_t>(QP::QF::readySet_.findMax());
            if (p <= QXK_attr_.lockCeil) {
                p = QXK_attr_.lockHolder;
                if (p != 0U) {
                    Q_ASSERT_ID(710, QP::QF::readySet_.hasElement(p));
                }
            }

            // set the next thread and ensure that it is registered
            next = QP::QActive::registry_[p];
            Q_ASSERT_ID(720, next != nullptr);

            // is next a basic thread?
            if (next->m_osObject == nullptr) {
                // is the next priority above the initial priority?
                if (p > QP::QActive::registry_[prio_in]->m_prio) {
    #if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
                    if (p != QXK_attr_.actPrio) { // changing threads?
                        QXK_contextSw(next);
                    }
    #endif // QF_ON_CONTEXT_SW || Q_SPY
                    QXK_attr_.next = next;
                }
                else {
                    QXK_attr_.next = nullptr;
                    p = 0U; // no activation needed
                }
            }
            else {  // next is the extended-thread
                QXK_attr_.next = next;
                QXK_CONTEXT_SWITCH_();
                p = 0U; // no activation needed
            }
        }
    } while (p != 0U); // while activation needed

    // restore the active priority
    QXK_attr_.actPrio = prio_in;

    #if (defined QF_ON_CONTEXT_SW) || (defined Q_SPY)
    if (next->m_osObject == nullptr) {
        QXK_contextSw((prio_in == 0U)
                       ? nullptr
                       : QP::QActive::registry_[prio_in]);
    }
    #endif // QF_ON_CONTEXT_SW || Q_SPY
}

//${QXK-extern-C::QXK_current} ...............................................
QP::QActive * QXK_current() noexcept {
    //! @pre the QXK kernel must be running
    Q_REQUIRE_ID(800, QXK_attr_.lockCeil <= QF_MAX_ACTIVE);

    QF_CRIT_STAT_
    QF_CRIT_E_();

    QP::QActive *curr = QXK_attr_.curr;
    if (curr == nullptr) { // basic thread?
        curr = QP::QActive::registry_[QXK_attr_.actPrio];
    }
    QF_CRIT_X_();

    //! @post the current thread must be valid
    Q_ENSURE_ID(890, curr != nullptr);

    return curr;
}

//${QXK-extern-C::QXK_contextSw} .............................................
#if defined(Q_SPY) || defined(QF_ON_CONTEXT_SW)
void QXK_contextSw(QP::QActive * const next) {
    #ifdef Q_SPY
    std::uint8_t const prev_prio = (QXK_attr_.prev != nullptr)
                             ? QXK_attr_.prev->m_prio
                             : 0U;
    #endif // Q_SPY

    if (next != nullptr) { // next is NOT idle?
        QS_BEGIN_NOCRIT_PRE_(QP::QS_SCHED_NEXT, next->m_prio)
            QS_TIME_PRE_(); // timestamp
            QS_2U8_PRE_(next->m_prio, prev_prio);
        QS_END_NOCRIT_PRE_()
    }
    else { // going to idle
        QS_BEGIN_NOCRIT_PRE_(QP::QS_SCHED_IDLE, prev_prio)
            QS_TIME_PRE_(); // timestamp
            QS_U8_PRE_(prev_prio);
        QS_END_NOCRIT_PRE_()
    }

    #ifdef QF_ON_CONTEXT_SW
        QF_onContextSw(QXK_attr_.prev, next);
    #endif // QF_ON_CONTEXT_SW

    QXK_attr_.prev = next; // update the previous thread
}
#endif //  defined(Q_SPY) || defined(QF_ON_CONTEXT_SW)

//${QXK-extern-C::QXK_threadExit_} ...........................................
void QXK_threadExit_() {
    QF_CRIT_STAT_
    QF_CRIT_E_();

    QP::QXThread const * const thr = QXTHREAD_CAST_(QXK_attr_.curr);

    //! @pre this function must:
    //! - NOT be called from an ISR;
    //! - be called from an extended thread;
    Q_REQUIRE_ID(900, (!QXK_ISR_CONTEXT_())
        && (thr != nullptr));
    //! @pre also: the thread must NOT be holding a scheduler lock.
    Q_REQUIRE_ID(901, QXK_attr_.lockHolder != thr->m_prio);

    std::uint_fast8_t const p =
        static_cast<std::uint_fast8_t>(thr->m_prio);

    // remove this thread from the QF
    QP::QActive::registry_[p] = nullptr;
    QP::QF::readySet_.remove(p);
    static_cast<void>(QXK_sched_()); // synchronous scheduling
    QF_CRIT_X_();
}
//$enddef${QXK-extern-C} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
} // extern "C"
