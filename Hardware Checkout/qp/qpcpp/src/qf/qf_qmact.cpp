//$file${src::qf::qf_qmact.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: qpcpp.qm
// File:  ${src::qf::qf_qmact.cpp}
//
// This code has been generated by QM 5.2.4 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This code is covered by the following QP license:
// License #    : LicenseRef-QL-dual
// Issued to    : Any user of the QP/C++ real-time embedded framework
// Framework(s) : qpcpp
// Support ends : 2023-12-31
// License scope:
//
// Copyright (C) 2005 Quantum Leaps, LLC <state-machine.com>.
//
// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
//
// This software is dual-licensed under the terms of the open source GNU
// General Public License version 3 (or any later version), or alternatively,
// under the terms of one of the closed source Quantum Leaps commercial
// licenses.
//
// The terms of the open source GNU General Public License version 3
// can be found at: <www.gnu.org/licenses/gpl-3.0>
//
// The terms of the closed source Quantum Leaps commercial licenses
// can be found at: <www.state-machine.com/licensing>
//
// Redistributions in source code must retain this top-level comment block.
// Plagiarizing this software to sidestep the license obligations is illegal.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${src::qf::qf_qmact.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//! @file
//! @brief QMActive::QMActive() and virtual functions

#define QP_IMPL           // this is QP implementation
#include "qf_port.hpp"    // QF port
#include "qassert.h"      // QP embedded systems-friendly assertions

//! Internal macro to cast a QP::QMActive pointer `qact_` to QP::QMsm*
//! @note
//! Casting pointer to pointer pointer violates the MISRA-C++ 2008 Rule 5-2-7,
//! cast from pointer to pointer. Additionally this cast violates the MISRA-
//! C++ 2008 Rule 5-2-8 Unusual pointer cast (incompatible indirect types).
//! Encapsulating these violations in a macro allows to selectively suppress
//! this specific deviation.
#define QF_QMACTIVE_TO_QMSM_CAST_(qact_) \
    reinterpret_cast<QMsm *>((qact_))

//! Internal macro to cast a QP::QMActive pointer `qact_` to QP::QMsm const *
#define QF_QMACTIVE_TO_QMSM_CONST_CAST_(qact_) \
    reinterpret_cast<QMsm const *>((qact_))

// unnamed namespace for local definitions with internal linkage
namespace {
//Q_DEFINE_THIS_MODULE("qf_qmact")
} // unnamed namespace

//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 700U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 7.0.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${QF::QMActive} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace QP {

//${QF::QMActive} ............................................................

//${QF::QMActive::init} ......................................................
void QMActive::init(
    void const * const e,
    std::uint_fast8_t const qs_id)
{
    m_state.obj = &QMsm::msm_top_s;
    QF_QMACTIVE_TO_QMSM_CAST_(this)->QMsm::init(e, qs_id);
}

//${QF::QMActive::init} ......................................................
void QMActive::init(std::uint_fast8_t const qs_id) {
    m_state.obj = &QMsm::msm_top_s;
    QF_QMACTIVE_TO_QMSM_CAST_(this)->QMsm::init(qs_id);
}

//${QF::QMActive::dispatch} ..................................................
void QMActive::dispatch(
    QEvt const * const e,
    std::uint_fast8_t const qs_id)
{
    QF_QMACTIVE_TO_QMSM_CAST_(this)->QMsm::dispatch(e, qs_id);
}

//${QF::QMActive::isInState} .................................................
bool QMActive::isInState(QMState const * const st) const noexcept {
    return QF_QMACTIVE_TO_QMSM_CONST_CAST_(this)->QMsm::isInState(st);
}

//${QF::QMActive::childStateObj} .............................................
QMState const * QMActive::childStateObj(QMState const * const parent) const noexcept {
    return QF_QMACTIVE_TO_QMSM_CONST_CAST_(this)
               ->QMsm::childStateObj(parent);
}

//${QF::QMActive::getStateHandler} ...........................................
#ifdef Q_SPY
QStateHandler QMActive::getStateHandler() noexcept {
    return QF_QMACTIVE_TO_QMSM_CAST_(this)->QMsm::getStateHandler();
}

#endif // def Q_SPY

} // namespace QP
//$enddef${QF::QMActive} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
