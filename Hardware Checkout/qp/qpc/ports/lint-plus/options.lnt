//============================================================================
// QP/C Real-Time Embedded Framework (RTEF)
// Copyright (C) 2005 Quantum Leaps, LLC. All rights reserved.
//
// SPDX-License-Identifier: GPL-3.0-or-later OR LicenseRef-QL-commercial
//
// This software is dual-licensed under the terms of the open source GNU
// General Public License version 3 (or any later version), or alternatively,
// under the terms of one of the closed source Quantum Leaps commercial
// licenses.
//
// The terms of the open source GNU General Public License version 3
// can be found at: <www.gnu.org/licenses/gpl-3.0>
//
// The terms of the closed source Quantum Leaps commercial licenses
// can be found at: <www.state-machine.com/licensing>
//
// Redistributions in source code must retain this top-level comment block.
// Plagiarizing this software to sidestep the license obligations is illegal.
//
// Contact information:
// <www.state-machine.com>
// <info@state-machine.com>
//============================================================================
//! @date Last updated on: 2022-10-14
//! @version Last updated for version: 7.1.3
//!
//! @file
//! @brief PC-Lint-Plus option file for linting QP/C source code

//============================================================================
// general options
-unit_check        // perform only subset check (suppresses Global Wrapup)
-max_threads=1     // suppress message "no '-max_threads=N' option"
//-vf              // print names of all source files (for debugging linting)

// include directories
-i.                // QP/C port includes (see also qk/ and qv/)
-i%QPC%/include    // QP/C public includes

// standards
// language standard...
au-misra3.lnt       // MISRA-C:2012 compliance
au-misra3-amd1.lnt  // MISRA-C:2012 amendment 1 compliance
au-misra3-amd2.lnt  // MISRA-C:2012 amendment 2 compliance

au-ds.lnt           // Dan Saks recommendations

// customized BARR-C:2018 style guidelines
au-barr.lnt         // BARR-C:2018 style guidelines
-e8505 // suppress [Rule 6.1e] function contains uppercase letters
-e8511 // suppress [Rule 7.1f] variable contains uppercase letters
-e8512 // suppress [Rule 7.1j] global variable should have 'g' prefix
-e8510 // suppress [Rule 7.1e] variable contains less than 3 characters
-e8513 // suppress [Rule 7.1k] variable should have 'pp' prefix
-e8514 // suppress [Rule 7.1l] variable should have 'p' prefix
-e8515 // suppress [Rule 7.1m] boolean variable should have 'b' prefix
-e8526 // suppress [Rule 5.1a] typedef name should consist of lowercase letters
-e8527 // suppress [Rule 5.1a] typedef name should end with '_t' suffix
-e9209 // suppress [Rule 5.2c] plain char data used with prohibited operator &
-e8522 // suppress [Rule 8.6a] variable should appear on RHS of '==' operator

// size/alignment options
cpu.lnt             // for the chosen CPU

// defined macros (might be undefined on command-line with -u<macro>)
-dQ_SPY
-dQ_UTEST

//============================================================================
// QP/C options for QP/C Applications
qpc.lnt             // QP/C options

//============================================================================
// additional suppression rules for building QP/C source code...

// QEP -----------------------------------------------------------------------

// M3-D4.9(A) function-like macro
-esym(9026,
 QMSM_CAST_,
 QACTIVE_CAST_)

// QF ------------------------------------------------------------------------
// M3-D4.8(A) complete definition is unnecessary in this translation unit
-efile(9045,
 -qf_pkg.h)

// M3-D4.9(A) function-like macro
-esym(9026,
 QF_CONST_CAST_,
 QF_PTR_AT_,
 QF_CRIT_E_,
 QF_CRIT_X_,
 Q_ASSERT_CRIT_,
 Q_REQUIRE_CRIT_,
 Q_ERROR_CRIT_,
 QF_SCHED_LOCK_,
 QF_SCHED_UNLOCK_,
 QF_ISR_CONTEXT_,
 QF_MPOOL_EL,
 QTICKER_CAST_)

// M3-R11.3(R) cast from pointer to object type
-emacro(9087,
 QMSM_CAST_,
 QTICKER_CAST_)

// suspicious pointer-to-pointer conversion (area too small)
-emacro(826,
 QTICKER_CAST_)

// definition of macro ends in semicolon
-esym(823,
 QF_CRIT_STAT_)

// M3-R11.8(R) cast drops const qualifier
-efunc(9005,
 QF_gc,
 QF_init)

// M3-D11.5(A) conversion from pointer to void to other pointer type
-efunc(9079,
 QF_bzero)

// M3-R17.8(A) function parameter modified
-efunc(9044,
 QF_LOG2,
 QMPool_init)

// M3-R18.1(R) potential out of bounds pointer access
-emacro(661,
 QF_EPOOL_EVENT_SIZE_)

// M3-R11.5(A) conversion from pointer to void to other pointer type
-emacro(9079,
 QACTIVE_CAST_,
 QF_EPOOL_GET_)
-efunc(9079,
 QF_deleteRef_,
 QMPool_get,
 QMPool_put)

// M3-R11.5(A) conversion from pointer to void to other pointer type
-efunc(9079,
 QMPool_init,
 QTimeEvt_tick_,
 QTimeEvt_armX,
 QTimeEvt_rearm)

// M3-R18.3(R) relational operator <= applied to pointers
-efunc(946,
 QMPool_get,
 QMPool_put)

// M3-R8.13(A) parameter of function could be pointer to const
-efunc(818,
 QActive_start_,
 QTicker_postLIFO_)

// function could be declared as 'noreturn'
-esym(2707,
 QTicker_postLIFO_)

// definition of macro ends in semicolon
-esym(823,
 QF_SCHED_STAT_)

// QV ------------------------------------------------------------------------

// QK ------------------------------------------------------------------------

// M3-D4.9(A) function-like macro
-esym(9026,
 QK_ISR_CONTEXT_,
 QK_ISR_ENTRY,
 QK_ISR_EXIT)

// QXK -----------------------------------------------------------------------
// M3-D4.9(A) function-like macro
-esym(9026,
 QXK_ISR_CONTEXT_,
 QXK_CONTEXT_SWITCH_,
 QXK_PTR_CAST_,
 QXTHREAD_CAST_)

// M3-R11.3(R) cast from pointer to object type
-emacro(9087,
 QXK_PTR_CAST_,
 QXTHREAD_CAST_)

// M3-R11.5(A) conversion from pointer to void to other pointer type
-emacro(9079,
 QXK_PTR_CAST_)

// suspicious pointer-to-pointer conversion (area too small)
-emacro(826,
 QXK_PTR_CAST_,
 QXTHREAD_CAST_)

// cast increases required alignment from 2 to 4
-emacro(2445,
 QXK_PTR_CAST_)

// M3-R8.13(A) parameter 'me' of function could be pointer to const
-efunc(818,
 QXThread_init_,
 QXThread_dispatch_,
 QXThread_postLIFO_)

// function could be declared as 'noreturn'
-esym(2707,
 QXThread_init_,
 QXThread_dispatch_,
 QXThread_postLIFO_)

// QS ------------------------------------------------------------------------
// the following options are needed only when Q_SPY is defined...

// M3-D4.9(A) function-like macro
-esym(9026,
 QS_INSERT_BYTE_,
 QS_INSERT_ESC_BYTE_,
 QS_RX_TRAN_,
 QS_CRIT_E_,
 QS_CRIT_X_,
 QS_PTR_INC_)

// M3-R11.1(4) conversion between pointer to function and differing type
-emacro(9074,
 QS_FUN_PRE_)

// M3-R14.3(R) boolean condition for 'if' always evaluates to 'false'
-emacro(774,
 QS_BEGIN_PRE_,
 QS_BEGIN_NOCRIT_PRE_)

// M3-R11.3(R) cast from pointer to object type
-efile(9087,
 -qs_rx.c,
 -qutest.c)

// M3-R11.4(A) conversion between object pointer type and integer type
-efile(572,
 -qs.c,
 -qs_rx.c)

// M3-R11.5(A) conversion from pointer to void to other pointer type
-efile(9079,
 -qs_rx.c,
 -qutest.c)

// M3-R15.5(A) return statement before end of function
-efile(904,
 -qs_rx.c)

// suspicious pointer-to-pointer conversion (area too small)
-efile(826,
 -qs_rx.c,
 -qutest.c)

// M3-R11.4(A) conversion between object pointer type and integer type
-emacro(9078,
 QS_OBJ_PRE_,
 QS_FUN_PRE_)

// Constant expression evaluates to 0 in 'binary' operation '>>'
-emacro(778,
 QS_BEGIN_PRE_,
 QS_BEGIN_NOCRIT_PRE_)

// M3-R8.13(A) parameter ... of function could be pointer to const
-efunc(818,
 QHsmDummy_init_,
 QHsmDummy_dispatch_,
 QActiveDummy_start_,
 QActiveDummy_init_,
 QActiveDummy_dispatch_)

// M3-R11.1(4) conversion between pointer to function and differing type
-efunc(9074,
 QS_getTestProbe_)

// M3-R11.4(R) conversion between object pointer type
-efunc(9078,
 QS_rxHandleGoodFrame_,
 QS_getTestProbe_)

// M3-R11.6(R) explicit cast from integer to 'void *'
-efunc(923,
 QS_rxHandleGoodFrame_,
 QS_getTestProbe_)

// cast increases required alignment
-efunc(2445,
 QS_rxHandleGoodFrame_,
 QS_rxPoke_)

// excessive shift value (precision 0 shifted right by ...)
-emacro(572,
 QS_BEGIN_PRE_,
 QS_BEGIN_NOCRIT_PRE_)

// M3-R11.6(R) explicit cast from integer to 'void *'
-emacro(923,
 QS_OBJ_PRE_,
 QS_FUN_PRE_)

// M3-R17.8(A) function parameter modified
-efunc(9044,
 QS_u64_raw_,
 QS_u64_fmt_)

// definition of macro ends in semi-colon
-esym(823,
 QS_CRIT_STAT_,
 QS_BEGIN_PRE_,
 QS_BEGIN_NOCRIT_PRE_)

// the right operand to << always evaluates to 0
-emacro(845,
 QS_BEGIN_PRE_,
 QS_BEGIN_NOCRIT_PRE_)

// constant value used in Boolean context (left operand to || operator)
-emacro(506,
 QS_BEGIN_PRE_,
 QS_BEGIN_NOCRIT_PRE_)

// M3-R19.2(A) union declared
-efunc(9018,
 QS_target_info_pre_,
 QS_f32_fmt_,
 QS_f64_fmt_)

// union initialization
-efunc(708,
 QS_f64_fmt_)

// union member not referenced
-esym(754,
 Variant::aFlt,
 AFltVar::prio,
 *U32Rep::u32)

